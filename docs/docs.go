// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/people": {
            "get": {
                "description": "Возвращает список людей с фильтрацией и пагинацией",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Получить список людей",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Фильтр по имени",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по фамилии",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Фильтр по возрасту",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по полу",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по национальности",
                        "name": "nationality",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Смещение (пагинация)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Ограничение (пагинация)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Person"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Принимает имя, фамилию и отчество. Определяет пол и национальность с помощью внешних API.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Создание нового человека",
                "parameters": [
                    {
                        "description": "Данные для создания",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PersonCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people/{id}": {
            "get": {
                "description": "Возвращает информацию о человеке по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Получить человека по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID человека",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет существующего человека по ID. Принимает только те поля, которые нужно изменить.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Обновить данные человека",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID человека",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Обновляемые данные",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PersonUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет человека по ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Удалить человека",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID человека",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.PersonCreate": {
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "name": {
                    "description": "Имя (обязательное)",
                    "type": "string"
                },
                "patronymic": {
                    "description": "Отчество (опционально)",
                    "type": "string"
                },
                "surname": {
                    "description": "Фамилия (обязательная)",
                    "type": "string"
                }
            }
        },
        "handlers.PersonUpdate": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возраст (опционально)",
                    "type": "integer"
                },
                "gender": {
                    "description": "Пол (опционально)",
                    "type": "string"
                },
                "name": {
                    "description": "Имя (опционально)",
                    "type": "string"
                },
                "nationality": {
                    "description": "Национальность (опционально)",
                    "type": "string"
                },
                "patronymic": {
                    "description": "Отчество (опционально)",
                    "type": "string"
                },
                "surname": {
                    "description": "Фамилия (опционально)",
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "внутренняя ошибка сервера"
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Удалён"
                }
            }
        },
        "models.Person": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возраст (опционально)",
                    "type": "integer"
                },
                "gender": {
                    "description": "Пол (опционально)",
                    "type": "string"
                },
                "id": {
                    "description": "Уникальный идентификатор",
                    "type": "integer"
                },
                "name": {
                    "description": "Имя (обязательное)",
                    "type": "string"
                },
                "nationality": {
                    "description": "Национальность (опционально)",
                    "type": "string"
                },
                "patronymic": {
                    "description": "Отчество (опционально)",
                    "type": "string"
                },
                "surname": {
                    "description": "Фамилия (обязательная)",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
